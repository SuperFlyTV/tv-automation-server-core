version: 2
jobs:
  build:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.10.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-node-cache-{{ .Branch }}-{{ checksum "meteor/package-lock.json" }}
            - v3-node-cache-{{ .Branch }}
      - run:
          name: Meteor NPM install
          command: cd meteor && meteor npm install
          no_output_timeout: 60m
      - run:
          name: Meteor Build
          command: cd meteor && NODE_OPTIONS="--max-old-space-size=4096" METEOR_DEBUG_BUILD=1 meteor build --allow-superuser --directory .
          no_output_timeout: 60m
      - run:
          name: Meteor Bundle NPM Build
          command: cd meteor/bundle/programs/server && npm install
          no_output_timeout: 60m
      - save_cache:
          key: v3-node-cache-{{ .Branch }}-{{ checksum "meteor/package-lock.json" }}
          paths:
            - meteor/node_modules
            - ~/.meteor
      - save_cache:
          key: v3-node-cache-{{ .Branch }}
          paths:
            - meteor/node_modules
            - ~/.meteor
      - persist_to_workspace:
          root: .
          paths:
            - .

  tests:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.10.2
    steps:
      - checkout
      - run:
          name: Run tests and send coverage
          command: cd meteor && meteor npm install && meteor npm run prepareForTest && meteor npm run ci
          no_output_timeout: 60m
  lint:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.10.2
    steps:
      - checkout
      - run:
          name: Typecheck and lint code
          command: cd meteor && meteor npm install && meteor npm run ci:lint
          no_output_timeout: 15m

  validate-dependencies:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.10.2
    steps:
      - checkout
      - run:
          name: Validate production dependencies for vulnerabilities and compatible licenses
          command: cd meteor && meteor npm install && meteor npm run validate:dependencies
          no_output_timeout: 15m
  validate-all-dependencies:
    docker:
      - image: sofietv/tv-automation-meteor-base:1.10.2
    steps:
      - checkout
      - run:
          name: Validate all dependencies for vulnerabilities
          command: cd meteor && meteor npm install && meteor npm run validate:dev-dependencies
          no_output_timeout: 15m

  publish-tag:
    docker:
      - image: circleci/buildpack-deps:buster
    steps:
      - setup_remote_docker:
          version: 19.03.8
      - attach_workspace:
          at: .
      - run:
          name: Build Docker Image
          command: docker build -f Dockerfile.circle . -t server-core:$CIRCLE_TAG
      - run:
           name: Publish Docker Image to Docker Hub
           command: |
             if [ -z "$DOCKERHUB_PASS" ]; then
               echo "Skipping"
             else
               echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
               docker tag server-core:$CIRCLE_TAG $DOCKERHUB_IMAGE:$CIRCLE_TAG
               docker push $DOCKERHUB_IMAGE:$CIRCLE_TAG
             fi
      - run:
           name: Publish Docker Image to Github Package Registry
           command: |
             if [ -z "$GITHUB_PASS" ]; then
               echo "Skipping"
             else
               echo "$GITHUB_PASS" | docker login docker.pkg.github.com -u "$GITHUB_USERNAME" --password-stdin
               docker tag server-core:$CIRCLE_TAG docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_TAG
               docker push docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_TAG
             fi
  publish-branch:
    docker:
      - image: circleci/buildpack-deps:buster
    steps:
      - setup_remote_docker:
          version: 19.03.8
      - attach_workspace:
          at: .
      - run:
          name: Build Docker Image
          command: docker build -f Dockerfile.circle . -t server-core:$CIRCLE_BRANCH
      - run:
           name: Publish Docker Image to Docker Hub
           command: |
             if [ -z "$DOCKERHUB_PASS" ]; then
               echo "Skipping"
             else
               echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
               docker tag server-core:$CIRCLE_BRANCH $DOCKERHUB_IMAGE:$CIRCLE_BRANCH
               docker push $DOCKERHUB_IMAGE:$CIRCLE_BRANCH
             fi
      - run:
           name: Publish Docker Image to Github Package Registry
           command: |
             if [ -z "$GITHUB_PASS" ]; then
               echo "Skipping"
             else
               echo "$GITHUB_PASS" | docker login docker.pkg.github.com -u "$GITHUB_USERNAME" --password-stdin
               docker tag server-core:$CIRCLE_BRANCH docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_BRANCH
               docker push docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_BRANCH
             fi
      - run:
          name: Persist image name
          command: |
            IMAGE_NAME=$(docker inspect --format='{{index .RepoDigests 0}}' server-core:$CIRCLE_BRANCH)
            echo $IMAGE_NAME > ./built-image
      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy-production:
    docker:
      - image: circleci/buildpack-deps:buster
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Download kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl

            mkdir -p $HOME/.kube
            echo -n $KUBECONFIG_DATA | base64 --decode > $HOME/.kube/config
      - run:
          name: Deploy
          command: |
            IMAGE_NAME=$(cat ./built-image)
            if [ -z "$IMAGE_NAME" ]
            then
              # report fail
              echo "No image specified"
              exit 1
            else
              ./kubectl set image deployment/sofie-production sofie=$IMAGE_NAME --record
            fi

  deploy-staging:
    docker:
      - image: circleci/buildpack-deps:buster
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Download kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            
            mkdir -p $HOME/.kube
            echo -n $KUBECONFIG_DATA | base64 --decode > $HOME/.kube/config
      - run:
          name: Deploy
          command: |
            IMAGE_NAME=$(cat ./built-image)
            if [ -z "$IMAGE_NAME" ]
            then
              # report fail
              echo "No image specified"
              exit 1
            else
              ./kubectl set image deployment/sofie-staging sofie=$IMAGE_NAME --record
            fi

workflows:
  version: 2
  build-test-publish:
    jobs:
      - validate-all-dependencies:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - validate-dependencies:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - build:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - lint:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - tests:
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      - publish-tag:
          requires:
            - tests
            - validate-dependencies
            - build
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
      - publish-branch:
          requires:
            - build
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - master
                - develop
                - stage
                - /release\d+/
                - /superfly-.*/
      - deploy-staging:
          requires:
            - publish-branch
          filters:
            tags:
              ignore: /.*/
            branches:
              only: 
                - superfly-dev
      - deploy-production:
          requires:
            - publish-branch
          filters:
            tags:
              ignore: /.*/
            branches:
              only: 
                - superfly-master
